//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/InputSystem/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace CustomInput
{
    public partial class @InputManager: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputManager()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a782e0db-051d-4ca2-8e6c-14612ca8b36e"",
            ""actions"": [
                {
                    ""name"": ""AttackBullet"",
                    ""type"": ""Button"",
                    ""id"": ""81e48f93-0b93-4066-9c03-8abf692abffd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackRocket"",
                    ""type"": ""Button"",
                    ""id"": ""8935afcf-1b1f-4e6e-a3c0-7f3d6e7de262"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackBomb"",
                    ""type"": ""Button"",
                    ""id"": ""fadec8c9-1d2f-43c0-8ffa-0f1896af9688"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a4198a64-6c58-4a4a-8ec7-016153a7b0bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""3f540750-d9cb-4934-bec8-1a116f52ede0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""ae50b75e-1e6f-418b-9fbe-44c19b7e12b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""8d9f4b88-469f-4414-bc80-76283207dedb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8574ac90-c666-4b49-80a4-48742a357bfa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AttackBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b58e5794-f5da-417e-afd1-417e303da7fe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AttackRocket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d75d06e-a5df-42eb-917a-854b0d62d772"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AttackBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""508d19b4-f1b1-4f58-abbd-eafedcf05baa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c66283d-5bd0-41c9-9b87-c8dae28e2be5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""085cf6ba-fd28-4876-802d-9d79d0be35a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a173c412-a482-498b-88ed-85ed3e11c59f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Tuchscreen"",
            ""bindingGroup"": ""Tuchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_AttackBullet = m_Player.FindAction("AttackBullet", throwIfNotFound: true);
            m_Player_AttackRocket = m_Player.FindAction("AttackRocket", throwIfNotFound: true);
            m_Player_AttackBomb = m_Player.FindAction("AttackBomb", throwIfNotFound: true);
            m_Player_MoveLeft = m_Player.FindAction("MoveLeft", throwIfNotFound: true);
            m_Player_MoveRight = m_Player.FindAction("MoveRight", throwIfNotFound: true);
            m_Player_MoveUp = m_Player.FindAction("MoveUp", throwIfNotFound: true);
            m_Player_MoveDown = m_Player.FindAction("MoveDown", throwIfNotFound: true);
        }

        ~@InputManager()
        {
            Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputManager.Player.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_AttackBullet;
        private readonly InputAction m_Player_AttackRocket;
        private readonly InputAction m_Player_AttackBomb;
        private readonly InputAction m_Player_MoveLeft;
        private readonly InputAction m_Player_MoveRight;
        private readonly InputAction m_Player_MoveUp;
        private readonly InputAction m_Player_MoveDown;
        public struct PlayerActions
        {
            private @InputManager m_Wrapper;
            public PlayerActions(@InputManager wrapper) { m_Wrapper = wrapper; }
            public InputAction @AttackBullet => m_Wrapper.m_Player_AttackBullet;
            public InputAction @AttackRocket => m_Wrapper.m_Player_AttackRocket;
            public InputAction @AttackBomb => m_Wrapper.m_Player_AttackBomb;
            public InputAction @MoveLeft => m_Wrapper.m_Player_MoveLeft;
            public InputAction @MoveRight => m_Wrapper.m_Player_MoveRight;
            public InputAction @MoveUp => m_Wrapper.m_Player_MoveUp;
            public InputAction @MoveDown => m_Wrapper.m_Player_MoveDown;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @AttackBullet.started += instance.OnAttackBullet;
                @AttackBullet.performed += instance.OnAttackBullet;
                @AttackBullet.canceled += instance.OnAttackBullet;
                @AttackRocket.started += instance.OnAttackRocket;
                @AttackRocket.performed += instance.OnAttackRocket;
                @AttackRocket.canceled += instance.OnAttackRocket;
                @AttackBomb.started += instance.OnAttackBomb;
                @AttackBomb.performed += instance.OnAttackBomb;
                @AttackBomb.canceled += instance.OnAttackBomb;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @AttackBullet.started -= instance.OnAttackBullet;
                @AttackBullet.performed -= instance.OnAttackBullet;
                @AttackBullet.canceled -= instance.OnAttackBullet;
                @AttackRocket.started -= instance.OnAttackRocket;
                @AttackRocket.performed -= instance.OnAttackRocket;
                @AttackRocket.canceled -= instance.OnAttackRocket;
                @AttackBomb.started -= instance.OnAttackBomb;
                @AttackBomb.performed -= instance.OnAttackBomb;
                @AttackBomb.canceled -= instance.OnAttackBomb;
                @MoveLeft.started -= instance.OnMoveLeft;
                @MoveLeft.performed -= instance.OnMoveLeft;
                @MoveLeft.canceled -= instance.OnMoveLeft;
                @MoveRight.started -= instance.OnMoveRight;
                @MoveRight.performed -= instance.OnMoveRight;
                @MoveRight.canceled -= instance.OnMoveRight;
                @MoveUp.started -= instance.OnMoveUp;
                @MoveUp.performed -= instance.OnMoveUp;
                @MoveUp.canceled -= instance.OnMoveUp;
                @MoveDown.started -= instance.OnMoveDown;
                @MoveDown.performed -= instance.OnMoveDown;
                @MoveDown.canceled -= instance.OnMoveDown;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_TuchscreenSchemeIndex = -1;
        public InputControlScheme TuchscreenScheme
        {
            get
            {
                if (m_TuchscreenSchemeIndex == -1) m_TuchscreenSchemeIndex = asset.FindControlSchemeIndex("Tuchscreen");
                return asset.controlSchemes[m_TuchscreenSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnAttackBullet(InputAction.CallbackContext context);
            void OnAttackRocket(InputAction.CallbackContext context);
            void OnAttackBomb(InputAction.CallbackContext context);
            void OnMoveLeft(InputAction.CallbackContext context);
            void OnMoveRight(InputAction.CallbackContext context);
            void OnMoveUp(InputAction.CallbackContext context);
            void OnMoveDown(InputAction.CallbackContext context);
        }
    }
}
